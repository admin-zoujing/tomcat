下载地址：http://archive.apache.org/dist/tomcat
Tomcat 优化分为系统优化，Java虚拟机调优,Tomcat本身的优化。
Tomcat 如何起停
./catalina.sh stop
./catalina.sh start
/sbin/service tomcat restart
 /webagme/tomcat/bin/catalina.sh start
1.如何调整tomcat的占用内存
A： 方法如下：
1. linux 下编辑tomcat安装目录下的bin目录下的catalina.sh文件，windows下为catalina.bat
vi  catalina.sh
2. 查找到tomcat内存参数一行：/ JAVA_OPTS，如果找不到则在第一行写上
3. 将JAVA_OPTS="-Xms 1024m –Xmx 1520m"一行的两个参数依据服务器实际内存数量分别进行更改：
        - Xms为tomcat启动初始内存，一般为服务器开机后可用空闲内存减去100M
        - Xmx为tomcat最大占用内存，一般为服务器开机后可用空闲内存减去50M
一般说来，您应该使用物理内存的 80% 作为堆大小。
说明：以上两个参数关系到tomcat承受的访问性能，但也要根据服务器实际内存情况设定。
有人建议Xms和Xmx的值取成一样比较好，说是可以加快内存回收速度。但未经本人验证过。有兴趣可以试试。
 
这两个值的大小一般根据需要进行配置。初始化堆的大小执行了虚拟机在启动时向系统申请的内存的大小。一般而言，这个参数不重要。但是有的应用程式在大负载的情况下会急剧地占用更多的内存，此时这个参数就是显得很重要，假如虚拟机启动时配置使用的内存比较小而在这种情况下有许多对象进行初始化，虚拟机就必须重复地增加内存来满足使用。由于这种原因，我们一般把-Xms和-Xmx设为相同大，而堆的最大值受限于系统使用的物理内存。一般使用数据量较大的应用程式会使用持久对象，内存使用有可能迅速地增长。当应用程式需要的内存超出堆的最大值时虚拟机就会提示内存溢出，并且导致应用服务崩溃。因此一般建议堆的最大值配置为可用内存的最大值的80%。 


Tomcat默认能够使用的内存为128MB，在较大型的应用项目中，这点内存是不够的，需要调大。 


Windows下，在文档/bin/catalina.bat，Unix下，在文档/bin/catalina.sh的前面，增加如下配置： 


JAVA_OPTS='-Xms【初始化内存大小】 -Xmx【能够使用的最大内存】' 


需要把这个两个参数值调大。例如： 


JAVA_OPTS='-Xms256m -Xmx512m' 


表示初始化内存为256MB，能够使用的最大内存为512MB。 
JAVA_OPTS="-server -Xms800m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=1024m -XX:MaxNewSize=1024m"

另外需要考虑的是Java提供的垃圾回收机制。虚拟机的堆大小决定了虚拟机花费在收集垃圾上的时间和频度。收集垃圾能够接受的速度和应用有关，应该通过分析实际的垃圾收集的时间和频率来调整。假如堆的大小很大，那么完全垃圾收集就会很慢，但是频度会降低。假如您把堆的大小和内存的需要一致，完全收集就很快，但是会更加频繁。调整堆大小的的目的是最小化垃圾收集的时间，以在特定的时间内最大化处理客户的请求。在基准测试的时候，为确保最好的性能，要把堆的大小设大，确保垃圾收集不在整个基准测试的过程中出现。 


假如系统花费很多的时间收集垃圾，请减小堆大小。一次完全的垃圾收集应该不超过 3-5 秒。假如垃圾收集成为瓶颈，那么需要指定代的大小，检查垃圾收集的周详输出，研究 垃圾收集参数对性能的影响。一般说来，您应该使用物理内存的 80% 作为堆大小。当增加处理器时，记得增加内存，因为分配能够并行进行，而垃圾收集不是并行的。 
 
2.如何调整tomcat的线程参数
A： 方法如下：
5.编辑tomcat安装目录下的conf目录下的server.xml文件
在tomcat配置文件server.xml中的<Connector />配置中，和连接数相关的参数有：
maxThreads="150"     表示最多同时处理150个连接,Tomcat使用线程来处理接收的每个请求。这个值表示Tomcat可创建的最大的线程数。默认值200。   
minSpareThreads="25"     表示即使没有人使用也开这么多空线程等待  
  maxSpareThreads="75"     表示如果最多可以空75个线程，例如某时刻有80人访问，之后没有人访问了，则tomcat不会保留80个空线程，而是关闭5个空的。  （一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。默认值50。 
）
   
  acceptCount="100"   当同时连接的人数达到maxThreads时，还可以接收排队的连接数量，超过这个连接的则直接返回拒绝连接。（指定当任何能够使用的处理请求的线程数都被使用时，能够放到处理队列中的请求数，超过这个数的请求将不予处理。默认值100。 ）
其中和最大连接数相关的参数为maxThreads和acceptCount。如果要加大并发连接数，应同时加大这两个参数。
web server允许的最大连接数还受制于操作系统的内核参数设置，通常Windows是2000个左右，Linux是1000个左右。tomcat5中的配置示例：
    <Connector port="8080"
               maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
               acceptCount="100"/>
主要是调整maxThreads 和acceptCount的值
对于其他端口的侦听配置，以此类推。
在tomcat配置文档server.xml中的配置中，和连接数相关的其他参数有： 

enableLookups： 

是否反查域名，默认值为true。为了提高处理能力，应配置为false 

connnectionTimeout： 

网络连接超时，默认值60000，单位：毫秒。配置为0表示永不超时，这样配置有隐患的。通常可配置为30000毫秒。 

maxKeepAliveRequests：
nginx动态的转给tomcat，nginx是不能keepalive的，而tomcat端默认开启了keepalive，会等待keepalive的timeout，默认不设置就是使用connectionTimeout。
所以必须设置tomcat的超时时间，并关闭tomcat的keepalive。否则会产生大量tomcat的socket timewait。
maxKeepAliveRequests="1"就可以避免tomcat产生大量的TIME_WAIT连接，从而从一定程度上避免tomcat假死。
试试设置tomcat/conf/server.xml：

maxKeepAliveRequests="1"
connectionTimeout="20000"

 maxKeepAliveRequests="1"表示每个连接只响应一次就关闭，这样就不会等待timeout了。
 
    <Connector executor="tomcatThreadPool"
               port="8080" protocol="HTTP/1.1" 
               connectionTimeout="30000" maxKeepAliveRequests="1" 
               redirectPort="8443" bufferSize="8192" sockedBuffer="65536" acceptCount="200"/>

bufferSize： 

输入流缓冲大小，默认值2048 bytes。 

compression： 

压缩传输，取值on/off/force，默认值off。
3、tomcat中如何禁止和允许列目录下的文档 

在{tomcat_home}/conf/web.xml中，把listings参数配置成false即可，如下： 



<servlet> 
... 
<init-param> 
<param-name>listings</param-name> 
<param-value>false</param-value> 
</init-param> 
... 
</servlet> 
4、tomcat中如何禁止和允许主机或IP地址访问 
<Host name="localhost" ...> 
  ... 
  <Valve className="org.apache.catalina.valves.RemoteHostValve" 
         allow="*.mycompany.com,www.yourcompany.com"/> 
  <Valve className="org.apache.catalina.valves.RemoteAddrValve" 
         deny="192.168.1.*"/> 
  ... 
</Host> 
cat /webgame/tomcat/conf/server.xml 